name: Deploy to Web Server

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      HOST: root@212.109.192.85
      DEPLOY_DIRECTORY: /var/www/encycloped.ru2
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      ENV: production
      APP_HOST: 0.0.0.0
      APP_PORT: 3000
      APP_PROTO: https
      DB_HOST: 0.0.0.0
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      ADMIN_LOGIN: ${{ secrets.ADMIN_LOGIN }}
      ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.21

      - name: Create .env file
        run: |
          echo "HOST=${HOST}" >> .env
          echo "DEPLOY_DIRECTORY=${DEPLOY_DIRECTORY}" >> .env
          echo "ENV=${ENV}" >> .env
          echo "APP_HOST=${APP_HOST}" >> .env
          echo "APP_PORT=${APP_PORT}" >> .env
          echo "APP_PROTO=${APP_PROTO}" >> .env
          echo "DB_HOST=${DB_HOST}" >> .env
          echo "DB_PORT=${DB_PORT}" >> .env
          echo "DB_NAME=${DB_NAME}" >> .env
          echo "DB_USER=${DB_USER}" >> .env
          echo "DB_PASSWORD=${DB_PASSWORD}" >> .env
          echo "ADMIN_LOGIN=${ADMIN_LOGIN}" >> .env
          echo "ADMIN_PASSWORD=${ADMIN_PASSWORD}" >> .env

      - name: Build App
        run: |
          go build -o app-dictionary -ldflags "-linkmode external -extldflags -static"  

      - name: Deploy to VM
        run: |
          sudo apt-get install -y ssh rsync
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > deploy_key.pem
          chmod 600 deploy_key.pem
          ssh -i deploy_key.pem -o StrictHostKeyChecking=no ${{ env.HOST }} "mkdir -p ${{ env.DEPLOY_DIRECTORY }}"
          rsync -avz -e 'ssh -i deploy_key.pem -o StrictHostKeyChecking=no' --exclude='.git' ./app-dictionary ${{ env.HOST }}:${{ env.DEPLOY_DIRECTORY }}

      - name: Remove old systemd service file
        run: |
          ssh -i deploy_key.pem -o StrictHostKeyChecking=no ${{ env.HOST }} "rm -f /etc/systemd/system/app-dictionary.service"

      - name: Create systemd service file
        run: |
          echo "[Unit]" > app-dictionary.service
          echo "Description=app dictionary" >> app-dictionary.service
          echo "After=network.target" >> app-dictionary.service
          echo "" >> app-dictionary.service
          echo "[Service]" >> app-dictionary.service
          echo "User=root" >> app-dictionary.service
          echo "WorkingDirectory=${DEPLOY_DIRECTORY}" >> app-dictionary.service
          echo "ExecStart=${DEPLOY_DIRECTORY}/app-dictionary" >> app-dictionary.service
          echo "Restart=always" >> app-dictionary.service
          echo "RestartSec=4" >> app-dictionary.service
          echo "StandardOutput=inherit" >> app-dictionary.service
          echo "" >> app-dictionary.service
          echo "[Install]" >> app-dictionary.service
          echo "WantedBy=multi-user.target" >> app-dictionary.service

      - name: List workspace contents
        run: |
          echo "Listing deployment folder contents:"
          ls -la ${{ github.workspace }}/deployment

      - name: Copy systemd service file
        run: |
          scp -i deploy_key.pem -o StrictHostKeyChecking=no app-dictionary.service ${{ env.HOST }}:/etc/systemd/system/app-dictionary.service

      - name: Start application
        run: |
          ssh -i deploy_key.pem -o StrictHostKeyChecking=no ${{ env.HOST }} "systemctl daemon-reload && systemctl restart app-dictionary.service"
